# Sample config
include:
  - /path/to/non/existing/file: false
  - /path/to/file/with/config
protocol:
  # All supported type:
  #   http - basic method (requires 'address' and 'port')
  #   https - TLS encrypted (requires 'address', 'port', 'cert' and 'key')
  #   unix - unix domain socket (requires 'address')
  #          if socket is already created server will be unable to start with
  #          error 'socket address already in use'
  # To correct start server all bindpoints should be successfuly binded
  bind:
    - type: https
      cert: /server/cert.pem
      key: /server/key.pem
      address: 0.0.0.0
      port: 1337
    - type: unix
      address: /tmp/server.sock
      # [optional] Enable from loopback address when connection is made from this bindpoint
      # default: false
      allow_private: true
      # [optional] Change mode on socket
      # default: 666
      mode: 660
      # [optional] Change socket group owner
      # default: current process gid
      # gid: 1000
      # [optional] Change socket owner
      # default: current process uid
      # uid: 1001
  # Basic auth, it's ok over https
  auth-basic:
    login: login
    # password is required to have hash field of type string
    # Generate hash using for example openssl passwd
    # Currently supported hash
    #   * Standard BSD hash
    #   * Enhanced DES-based hash
    #   * MD5 crypt
    #   * HMAC-SHA1 hash
    #   * SHA-256 based
    #   * SHA-512 based
    #   * unix-crypt
    #
    # Examples:
    #   * password: password
    #   (MD5)
    password: $1$sRN7MKRJ$XfbAXBpoOphTIhBRZuPAl.
    #   (unix-crypt)
    # password: ktsudxoI79bPk
    #
    # Special case when we WANT clear text password
    # is_plaintext: true
  uri:
    # default: /streaming
    streamed: /streaming
    # default: /jsonrpc (rpc support only post request)
    rpc: /jsonrpc

# [optional] Set default limits
# All of them could be changed on per-method basis
limits:
# [optional]
# Maximum time spend while waiting forrequest from client
# unit = ms
read-timeout: 10000

# [optional]
# Maximum time spend while processing request (used only in RPC)
# Setting it to 0 disables timeout (which is default)
# unit = ms
exec-timeout: 0

# [optional]
# Maximum size for request (RPC and stream) (5242880 if not given)
# THIS IS GLOBAL MAXIMUM (methods cannot change it)
# unit = byte
payload-size: 5242880

# [optional]
# Maximum response for RPC (5242880 if not given)
# Could be changed on per-method level
# unit = byte
max-response: 5242880

log:
  # Also possible trace, debug, info, warn, error
  level: Info

# Methods used as streamed when output of invocation is continously streamed back
# Request: {"method": "name-required", "params": "optiona"}
# Address: POST /streaming (for streamed == true)
# JSON-RPC methods
# Address: POST /jsonrpc (for streamed == false)
methods:
  logs:
    streamed: true
    invoke:
      exec: catlog
      # [optional] Change user running command.
      # Default configuration use server UID and GID
      run-as:
        # [required] Group ID
        gid: 1000
        # [required] User ID
        uid: 1000
     
  #[required] Method name
  reboot:
    #[optional] method support streaming (default: false)
    streamed: false
    #[required] What we should invoke.
    invoke:
      #[optional] Delay before execution (seconds).
      #           Used only if exist field response. default: 10
      delay: 10
      #[required] Invocation type. For now only fork and exec
      exec: /system/bin/reboot
    output:
      #[optional] Ignore real execution result and send back
      #           content without any parsing
      response:
        Fake response, execution delayed

  upgrade:
    # [optional] use utf-8 or base64 encoding. Only for RPC
    encoding: base64
    # [optional] Procedure is exposed only for requests from loopback
    #            (including all requests from unix sockets)
    #            without checking for given login and password (if requested in config)
    #            default: false
    private: true
    params:
      #[required] parameter name
      uri:
        #[required] For now: string, number
        type: string
        #[optional] field can be omited?, default: false
        #           if optional field is missing all expression
        #           that depends on it are skipped
        optional: true

    invoke:
      exec: echo
      delay: 10
      args:
        - -f
        - long with spaces
        # This one is interesting, use supplied parameter uri
        - param: uri
        # This concatenate to abc_ValueOfUri_cba. If uri is not included wholole line is skipped
        - [abc_, {param: uri}, _cba]
        # If we want keep spaces just use
        # and get: "abc ValueOfUri cba"
        - ["abc ", {param: uri}, " cba"]
        # Note: this perform flatmap first!
        # so this expression is same as above, but don't do this
        # it's bad and ugly
        - [[[[[[a],[b]],[[c]]],[" "]], [{param: uri}]], [" cba"]]
        # self: restricted keyword? - pass whole structure of params json as string
        - {param: self}
        # specify skip: true to bind chain to specific option (which itself is ignored in chain expansion)
        - ["--parameter-active-only-when-uri-is-present", {param: uri, skip: true}]

  update:
    # [optional] Output configuration
    output:
    # [optional] default: text: Try converting command result to: string or json
    # This is only usable on RPC methods where encoding: utf-8
      format: json
    invoke:
      exec: /system/bin/am
      args:
        - broadcast
        - com.example.app.FORCE_UPDATE
